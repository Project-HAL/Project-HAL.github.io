<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="argparse_8h" kind="file" language="C++">
    <compoundname>argparse.h</compoundname>
    <includes local="no">string</includes>
    <includedby refid="hal_8h" local="yes">/home/mxwbio/Desktop/HAL/bin/lib/include/hal.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>/home/mxwbio/Desktop/HAL/bin/lib/include/argparse.h</label>
        <link refid="argparse_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>string</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>/home/mxwbio/Desktop/HAL/bin/lib/include/argparse.h</label>
        <link refid="argparse_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/home/mxwbio/Desktop/HAL/bin/lib/include/hal.h</label>
        <link refid="hal_8h_source"/>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacestd">std</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="argparse_8h_1a064871532e98179817691d89b2a4e34d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool checkOption</definition>
        <argsstring>(string name, int argc, char *argv[])</argsstring>
        <name>checkOption</name>
        <param>
          <type>string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>Parses through arguments and checks if an option/flag exists. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>string</computeroutput> to match option with </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argc</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>int</computeroutput> representing the number of arguments </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argv</parametername>
</parameternamelist>
<parameterdescription>
<para>array of <computeroutput>char</computeroutput> arrays, representing string arguments</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>bool</computeroutput> representing whether the flag exists. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mxwbio/Desktop/HAL/bin/lib/include/argparse.h" line="15" column="6" declfile="/home/mxwbio/Desktop/HAL/bin/lib/include/argparse.h" declline="15" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="argparse_8h_1af5d91cb84bd0040233a7a590725f4fe9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string getStringArg</definition>
        <argsstring>(string name, int argc, char *argv[], string usage=&quot;&quot;)</argsstring>
        <name>getStringArg</name>
        <param>
          <type>string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <param>
          <type>string</type>
          <declname>usage</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Gets the value of an argument option as a <computeroutput>string</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para>Parses through arguments, and returns value of matching name of the format: <verbatim>             &lt;option&gt; &lt;value&gt; 
</verbatim></para>
<para>Where &lt;option&gt; is matched to <computeroutput>name</computeroutput>. This functions exits when the option isn&apos;t found, and prints an optional usage message</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>string</computeroutput> to match option with </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argc</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>int</computeroutput> indicating the number of arguments </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argv</parametername>
</parameternamelist>
<parameterdescription>
<para>array of <computeroutput>char</computeroutput> arrays, representing string arguments </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>usage</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>string</computeroutput> representing an optional usage message, printed upon failure, default=<computeroutput>&quot;&quot;</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>string</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mxwbio/Desktop/HAL/bin/lib/include/argparse.h" line="35" column="8" declfile="/home/mxwbio/Desktop/HAL/bin/lib/include/argparse.h" declline="35" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="argparse_8h_1a92858476903f8ccc8c5385453d6c4eb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int getIntArg</definition>
        <argsstring>(string name, int argc, char *argv[], string usage=&quot;&quot;)</argsstring>
        <name>getIntArg</name>
        <param>
          <type>string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <param>
          <type>string</type>
          <declname>usage</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Gets the value of an argument option as an <computeroutput>int</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para>Parses through arguments, and returns value of matching name of the format: <verbatim>             &lt;option&gt; &lt;value&gt; 
</verbatim></para>
<para>Where &lt;option&gt; is matched to <computeroutput>name</computeroutput>. This functions exits when the option isn&apos;t found, and prints an optional usage message</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>string</computeroutput> to match option with </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argc</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>int</computeroutput> indicating the number of arguments </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argv</parametername>
</parameternamelist>
<parameterdescription>
<para>array of <computeroutput>char</computeroutput> arrays, representing string arguments </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>usage</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>string</computeroutput> representing an optional usage message, printed upon failure, default=<computeroutput>&quot;&quot;</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>int</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mxwbio/Desktop/HAL/bin/lib/include/argparse.h" line="55" column="5" declfile="/home/mxwbio/Desktop/HAL/bin/lib/include/argparse.h" declline="55" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="argparse_8h_1ac4e89233194a3d8f1135b70af7a06569" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float getFloatArg</definition>
        <argsstring>(string name, int argc, char *argv[], string usage=&quot;&quot;)</argsstring>
        <name>getFloatArg</name>
        <param>
          <type>string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <param>
          <type>string</type>
          <declname>usage</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Gets the value of an argument option as an <computeroutput>float</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para>Parses through arguments, and returns value of matching name of the format: <verbatim>             &lt;option&gt; &lt;value&gt; 
</verbatim></para>
<para>Where &lt;option&gt; is matched to <computeroutput>name</computeroutput>. This functions exits when the option isn&apos;t found, and prints an optional usage message</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>string</computeroutput> to match option with </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argc</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>int</computeroutput> indicating the number of arguments </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argv</parametername>
</parameternamelist>
<parameterdescription>
<para>array of <computeroutput>char</computeroutput> arrays, representing string arguments </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>usage</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>string</computeroutput> representing an optional usage message, printed upon failure, default=<computeroutput>&quot;&quot;</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>float</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mxwbio/Desktop/HAL/bin/lib/include/argparse.h" line="75" column="7" declfile="/home/mxwbio/Desktop/HAL/bin/lib/include/argparse.h" declline="75" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="argparse_8h_1a9c6a88f37b2c432fa85a66a204b660c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string getStringArgSecure</definition>
        <argsstring>(string name, string defaultValue, int argc, char *argv[])</argsstring>
        <name>getStringArgSecure</name>
        <param>
          <type>string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>string</type>
          <declname>defaultValue</declname>
        </param>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>Gets the value of an argument option as a <computeroutput>string</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para>Parses through arguments, and returns value of matching name of the format: <verbatim>             &lt;option&gt; &lt;value&gt; 
</verbatim></para>
<para>Where &lt;option&gt; is matched to <computeroutput>name</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>string</computeroutput> to match option with </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultValue</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>string</computeroutput> representing the default value if the option isn&apos;t found </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argc</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>int</computeroutput> indicating the number of arguments </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argv</parametername>
</parameternamelist>
<parameterdescription>
<para>array of <computeroutput>char</computeroutput> arrays, representing string arguments </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>string</computeroutput>; will return <computeroutput>defaultValue</computeroutput> if the option isn&apos;t found </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mxwbio/Desktop/HAL/bin/lib/include/argparse.h" line="95" column="8" declfile="/home/mxwbio/Desktop/HAL/bin/lib/include/argparse.h" declline="95" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="argparse_8h_1a15288c57f488608d672552830dd5a00c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int getIntArgSecure</definition>
        <argsstring>(string name, int defaultValue, int argc, char *argv[])</argsstring>
        <name>getIntArgSecure</name>
        <param>
          <type>string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>defaultValue</declname>
        </param>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>Gets the value of an argument option as a <computeroutput>int</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para>Parses through arguments, and returns value of matching name of the format: <verbatim>             &lt;option&gt; &lt;value&gt; 
</verbatim></para>
<para>Where &lt;option&gt; is matched to <computeroutput>name</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>string</computeroutput> to match option with </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultValue</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>int</computeroutput> representing the default value if the option isn&apos;t found </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argc</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>int</computeroutput> indicating the number of arguments </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argv</parametername>
</parameternamelist>
<parameterdescription>
<para>array of <computeroutput>char</computeroutput> arrays, representing string arguments </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>int</computeroutput>; will return <computeroutput>defaultValue</computeroutput> if the option isn&apos;t found </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mxwbio/Desktop/HAL/bin/lib/include/argparse.h" line="115" column="5" declfile="/home/mxwbio/Desktop/HAL/bin/lib/include/argparse.h" declline="115" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="argparse_8h_1aa4cb08dd4f28eb50b7777d5bf111a284" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float getFloatArgSecure</definition>
        <argsstring>(string name, float defaultValue, int argc, char *argv[])</argsstring>
        <name>getFloatArgSecure</name>
        <param>
          <type>string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>float</type>
          <declname>defaultValue</declname>
        </param>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>Gets the value of an argument option as a <computeroutput>float</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para>Parses through arguments, and returns value of matching name of the format: <verbatim>             &lt;option&gt; &lt;value&gt; 
</verbatim></para>
<para>Where &lt;option&gt; is matched to <computeroutput>name</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>string</computeroutput> to match option with </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>defaultValue</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>float</computeroutput> representing the default value if the option isn&apos;t found </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argc</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>int</computeroutput> indicating the number of arguments </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argv</parametername>
</parameternamelist>
<parameterdescription>
<para>array of <computeroutput>char</computeroutput> arrays, representing string arguments </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><computeroutput>float</computeroutput>; will return <computeroutput>defaultValue</computeroutput> if the option isn&apos;t found </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mxwbio/Desktop/HAL/bin/lib/include/argparse.h" line="134" column="7" declfile="/home/mxwbio/Desktop/HAL/bin/lib/include/argparse.h" declline="134" declcolumn="7"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>checkOption(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*argv[]);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>getStringArg(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*argv[],<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>usage=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getIntArg(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*argv[],<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>usage=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>getFloatArg(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*argv[],<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>usage=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>getStringArgSecure(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>name,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>defaultValue,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*argv[]);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getIntArgSecure(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>defaultValue,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*argv[]);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>getFloatArgSecure(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>name,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>defaultValue,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*argv[]);</highlight></codeline>
    </programlisting>
    <location file="/home/mxwbio/Desktop/HAL/bin/lib/include/argparse.h"/>
  </compounddef>
</doxygen>

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="argparse_8h" kind="file" language="C++">
    <compoundname>argparse.h</compoundname>
    <includes local="no">string</includes>
    <includedby refid="hal_8h" local="yes">/home/mxwbio/Desktop/HAL/bin/lib/include/hal.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>/home/mxwbio/Desktop/HAL/bin/lib/include/argparse.h</label>
        <link refid="argparse_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>string</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>/home/mxwbio/Desktop/HAL/bin/lib/include/argparse.h</label>
        <link refid="argparse_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/home/mxwbio/Desktop/HAL/bin/lib/include/hal.h</label>
        <link refid="hal_8h_source"/>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacestd">std</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="argparse_8h_1a064871532e98179817691d89b2a4e34d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool checkOption</definition>
        <argsstring>(string name, int argc, char *argv[])</argsstring>
        <name>checkOption</name>
        <param>
          <type>string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mxwbio/Desktop/HAL/bin/lib/include/argparse.h" line="17" column="6" declfile="/home/mxwbio/Desktop/HAL/bin/lib/include/argparse.h" declline="17" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="argparse_8h_1af5d91cb84bd0040233a7a590725f4fe9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string getStringArg</definition>
        <argsstring>(string name, int argc, char *argv[], string usage=&quot;&quot;)</argsstring>
        <name>getStringArg</name>
        <param>
          <type>string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <param>
          <type>string</type>
          <declname>usage</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mxwbio/Desktop/HAL/bin/lib/include/argparse.h" line="36" column="8" declfile="/home/mxwbio/Desktop/HAL/bin/lib/include/argparse.h" declline="36" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="argparse_8h_1a92858476903f8ccc8c5385453d6c4eb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int getIntArg</definition>
        <argsstring>(string name, int argc, char *argv[], string usage=&quot;&quot;)</argsstring>
        <name>getIntArg</name>
        <param>
          <type>string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <param>
          <type>string</type>
          <declname>usage</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mxwbio/Desktop/HAL/bin/lib/include/argparse.h" line="55" column="5" declfile="/home/mxwbio/Desktop/HAL/bin/lib/include/argparse.h" declline="55" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="argparse_8h_1ac4e89233194a3d8f1135b70af7a06569" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float getFloatArg</definition>
        <argsstring>(string name, int argc, char *argv[], string usage=&quot;&quot;)</argsstring>
        <name>getFloatArg</name>
        <param>
          <type>string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <param>
          <type>string</type>
          <declname>usage</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mxwbio/Desktop/HAL/bin/lib/include/argparse.h" line="74" column="7" declfile="/home/mxwbio/Desktop/HAL/bin/lib/include/argparse.h" declline="74" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="argparse_8h_1a9c6a88f37b2c432fa85a66a204b660c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string getStringArgSecure</definition>
        <argsstring>(string name, string defaultValue, int argc, char *argv[])</argsstring>
        <name>getStringArgSecure</name>
        <param>
          <type>string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>string</type>
          <declname>defaultValue</declname>
        </param>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mxwbio/Desktop/HAL/bin/lib/include/argparse.h" line="96" column="8" declfile="/home/mxwbio/Desktop/HAL/bin/lib/include/argparse.h" declline="96" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="argparse_8h_1a15288c57f488608d672552830dd5a00c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int getIntArgSecure</definition>
        <argsstring>(string name, int defaultValue, int argc, char *argv[])</argsstring>
        <name>getIntArgSecure</name>
        <param>
          <type>string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>defaultValue</declname>
        </param>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mxwbio/Desktop/HAL/bin/lib/include/argparse.h" line="118" column="5" declfile="/home/mxwbio/Desktop/HAL/bin/lib/include/argparse.h" declline="118" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="argparse_8h_1aa4cb08dd4f28eb50b7777d5bf111a284" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float getFloatArgSecure</definition>
        <argsstring>(string name, float defaultValue, int argc, char *argv[])</argsstring>
        <name>getFloatArgSecure</name>
        <param>
          <type>string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>float</type>
          <declname>defaultValue</declname>
        </param>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mxwbio/Desktop/HAL/bin/lib/include/argparse.h" line="139" column="7" declfile="/home/mxwbio/Desktop/HAL/bin/lib/include/argparse.h" declline="139" declcolumn="7"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>checkOption</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>Parses<sp/>through<sp/>arguments<sp/>and<sp/>checks<sp/>if<sp/>an<sp/>option/flag<sp/>exists.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>Parameters:</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>name:<sp/>string<sp/>to<sp/>match<sp/>option<sp/>with</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>argc:<sp/>number<sp/>of<sp/>arguments</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>argv:<sp/>array<sp/>of<sp/>C-style<sp/>arguments</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>Returns:<sp/>bool<sp/>representing<sp/>whether<sp/>the<sp/>flag<sp/>exists.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>checkOption(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*argv[]);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>getStringArg</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>Parses<sp/>through<sp/>arguments,<sp/>and<sp/>returns<sp/>value<sp/>of<sp/>matching<sp/>name<sp/>of<sp/>the<sp/>format:</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;option&gt;<sp/>&lt;value&gt;<sp/></highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>Where<sp/>&lt;option&gt;<sp/>is<sp/>matched<sp/>to<sp/>name.</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>Parameters:</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>name:<sp/>string<sp/>to<sp/>match<sp/>option<sp/>with</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>argc:<sp/>number<sp/>of<sp/>arguments</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>argv:<sp/>array<sp/>of<sp/>C-style<sp/>arguments</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>usage:<sp/>optional<sp/>usage<sp/>message<sp/>to<sp/>print<sp/>on<sp/>failure</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/>Returns:<sp/>std::string<sp/>representing<sp/>the<sp/>matching<sp/>value.<sp/>If<sp/>no<sp/>such<sp/>value<sp/>is<sp/>found,</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>then<sp/>the<sp/>null<sp/>character<sp/>is<sp/>returned.</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>getStringArg(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*argv[],<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>usage=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>getIntArg</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/>Parses<sp/>through<sp/>arguments,<sp/>and<sp/>returns<sp/>value<sp/>of<sp/>matching<sp/>name<sp/>of<sp/>the<sp/>format:</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;option&gt;<sp/>&lt;value&gt;<sp/></highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>Where<sp/>&lt;option&gt;<sp/>is<sp/>matched<sp/>to<sp/>name.</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>Parameters:</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>name:<sp/>string<sp/>to<sp/>match<sp/>option<sp/>with</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>argc:<sp/>number<sp/>of<sp/>arguments</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>argv:<sp/>array<sp/>of<sp/>C-style<sp/>arguments</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>usage:<sp/>optional<sp/>usage<sp/>message<sp/>to<sp/>print<sp/>on<sp/>failure</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/>Returns:<sp/>Integer<sp/>representing<sp/>the<sp/>matching<sp/>value.<sp/>If<sp/>no<sp/>such<sp/>value<sp/>is<sp/>found,</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>exits<sp/>with<sp/>status<sp/>2.</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getIntArg(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*argv[],<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>usage=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>getFloatArg</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/>Parses<sp/>through<sp/>arguments,<sp/>and<sp/>returns<sp/>value<sp/>of<sp/>matching<sp/>name<sp/>of<sp/>the<sp/>format:</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;option&gt;<sp/>&lt;value&gt;<sp/></highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/>Where<sp/>&lt;option&gt;<sp/>is<sp/>matched<sp/>to<sp/>name.</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/>Parameters:</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>name:<sp/>string<sp/>to<sp/>match<sp/>option<sp/>with</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>argc:<sp/>number<sp/>of<sp/>arguments</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>argv:<sp/>array<sp/>of<sp/>C-style<sp/>arguments</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>usage:<sp/>optional<sp/>usage<sp/>message<sp/>to<sp/>print<sp/>on<sp/>failure</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*<sp/>Returns:<sp/>Integer<sp/>representing<sp/>the<sp/>matching<sp/>value.<sp/>If<sp/>no<sp/>such<sp/>value<sp/>is<sp/>found,</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>exits<sp/>with<sp/>status<sp/>2.</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>getFloatArg(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*argv[],<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>usage=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>getStringArgSecure</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*<sp/>Parses<sp/>through<sp/>arguments,<sp/>and<sp/>returns<sp/>value<sp/>of<sp/>matching<sp/>name<sp/>of<sp/>the<sp/>format:</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;option&gt;<sp/>&lt;value&gt;<sp/></highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*<sp/>Where<sp/>&lt;option&gt;<sp/>is<sp/>matched<sp/>to<sp/>name.<sp/>If<sp/>the<sp/>option<sp/>isn&apos;t<sp/>found,<sp/>it<sp/>returns<sp/>the<sp/></highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*<sp/>given<sp/>default<sp/>value.</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*<sp/>Parameters:</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>name:<sp/>string<sp/>to<sp/>match<sp/>option<sp/>with</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>defaultValue:<sp/>string<sp/>representing<sp/>the<sp/>default<sp/>value<sp/>if<sp/>the<sp/>option<sp/></highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isn&apos;t<sp/>found</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>argc:<sp/>number<sp/>of<sp/>arguments</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>argv:<sp/>array<sp/>of<sp/>C-style<sp/>arguments</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/>Returns:<sp/>std::string<sp/>representing<sp/>the<sp/>matching<sp/>value.<sp/>If<sp/>no<sp/>such<sp/>value<sp/>is<sp/>found,</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>then<sp/>the<sp/>null<sp/>character<sp/>is<sp/>returned.</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>getStringArgSecure(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>name,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>defaultValue,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*argv[]);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>getIntArgSecure</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*<sp/>Parses<sp/>through<sp/>arguments,<sp/>and<sp/>returns<sp/>value<sp/>of<sp/>matching<sp/>name<sp/>of<sp/>the<sp/>format:</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;option&gt;<sp/>&lt;value&gt;<sp/></highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*<sp/>Where<sp/>&lt;option&gt;<sp/>is<sp/>matched<sp/>to<sp/>name.<sp/>If<sp/>the<sp/>option<sp/>isn&apos;t<sp/>found,<sp/>it<sp/>returns<sp/>the<sp/></highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*<sp/>default<sp/>value.</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*<sp/>Parameters:</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>name:<sp/>string<sp/>to<sp/>match<sp/>option<sp/>with</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>defaultValue:<sp/>integer<sp/>representing<sp/>the<sp/>default<sp/>value<sp/>if<sp/>the<sp/>option<sp/></highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isn&apos;t<sp/>found<sp/></highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>argc:<sp/>number<sp/>of<sp/>arguments</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>argv:<sp/>array<sp/>of<sp/>C-style<sp/>arguments</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*<sp/>Returns:<sp/>Integer<sp/>representing<sp/>the<sp/>matching<sp/>value.<sp/>If<sp/>no<sp/>such<sp/>value<sp/>is<sp/>found,</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>returns<sp/>defaultValue.</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>getIntArgSecure(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>defaultValue,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*argv[]);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>getFloatArgSecure</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*<sp/>Parses<sp/>through<sp/>arguments,<sp/>and<sp/>returns<sp/>value<sp/>of<sp/>matching<sp/>name<sp/>of<sp/>the<sp/>format:</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;option&gt;<sp/>&lt;value&gt;<sp/></highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>*<sp/>Where<sp/>&lt;option&gt;<sp/>is<sp/>matched<sp/>to<sp/>name.<sp/>If<sp/>the<sp/>option<sp/>isn&apos;t<sp/>found,<sp/>it<sp/>returns<sp/>the<sp/></highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/>*<sp/>default<sp/>value.</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/>*<sp/>Parameters:</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>name:<sp/>string<sp/>to<sp/>match<sp/>option<sp/>with</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>defaultValue:<sp/>integer<sp/>representing<sp/>the<sp/>default<sp/>value<sp/>if<sp/>the<sp/>option<sp/></highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isn&apos;t<sp/>found<sp/></highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>argc:<sp/>number<sp/>of<sp/>arguments</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>argv:<sp/>array<sp/>of<sp/>C-style<sp/>arguments</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/>*<sp/>Returns:<sp/>Integer<sp/>representing<sp/>the<sp/>matching<sp/>value.<sp/>If<sp/>no<sp/>such<sp/>value<sp/>is<sp/>found,</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>returns<sp/>defaultValue.</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>getFloatArgSecure(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>name,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>defaultValue,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*argv[]);</highlight></codeline>
    </programlisting>
    <location file="/home/mxwbio/Desktop/HAL/bin/lib/include/argparse.h"/>
  </compounddef>
</doxygen>
